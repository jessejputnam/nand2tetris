// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;


    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0;
        let heap[1] = 14333;
        return;
    }

    function int getFreeList() {
        return freeList;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prev;
        var int next;
        var int bestFitPrev;
        var int bestFit;
        var int newSegment;
        let next = freeList;
        let prev = -1;
        let bestFit = -1;

        // search for optimal memory segment
        while (~(next = 0)) {
            if (Memory.isBestFit(next, size, bestFit)) {
                let bestFit = next;
                let bestFitPrev = prev;
            }

            let prev = next;
            let next = Memory.peek(next);
        }

        if (bestFit = -1) {
            // Implement defrag
            return -1;
        }

        // If segment is fully used
        if (Memory.peek(bestFit + 1) = size) {
            // Handle if bestPossible is freeList
            if (bestFit = freeList) {
                let freeList = Memory.peek(bestFit);
                return newSegment;
            }
            // set prev.next to cur.next
            do Memory.poke(bestFitPrev, Memory.peek(bestFit));
            return bestFit;

        }

        // Get new segment start
        let newSegment = bestFit + 2 + Memory.peek(bestFit + 1) - size - 2;
        // Set new segment size
        do Memory.poke(newSegment + 1, size);
        // Subtract new segment size from best fit segment
        do Memory.poke(bestFit + 1, Memory.peek(bestFit + 1) - (size + 2));
        return newSegment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int cur;
        let cur = freeList;
        while (~(Memory.peek(cur) = 0)) {
            let cur = Memory.peek(cur);
        }

        do Memory.poke(cur, o);
        return;
    }    


    function boolean isBestFit(int next, int size, int bestFit) {
        // Segment is perfect size
        if (Memory.peek(next + 1) = size) {
            return true;
        }

        // Segment can contain size
        if (Memory.peek(next + 1) > size) {
            // No previous best fit
            if (bestFit = -1) { 
                return true;
            } 
            // Compare with previous best fit
            if (Memory.peek(bestFit + 1) > Memory.peek(next + 1)) {
                return true;
            }
        }

        return false;
    }
}
