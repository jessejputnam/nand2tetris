// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    field int currentColor;
    field int base;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = 1;
        let base = 16384;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let currentColor = 1;
        } else {
            let currentColor = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr;
        var int word;
        var int mask;

        let mask = Math.powersOfTwo(x & 15);
        let addr = base + ((32 * y) + (x/16));
        let word = Memory.peek(addr);

        if (currentColor) {
            do Memory.poke(addr, word | mask);
        } else {
            do Memory.poke(addr, word & ~mask);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        
        while (drawLineCheck(a, b, dx, dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }

    method boolean drawLineCheck(a, b, dx, dy) {
        if (a < dx + 1) {
            if (b < dy + 1) {
                return true;
            }
        }
        return false;
    }
}
