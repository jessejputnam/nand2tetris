// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let str = Array.new(1);
        } else {
            let str = Array.new(maxLength);
        }
        // let str = Array.new(maxLength);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < (len - 1)) {
            return str[j];
        }
        return -1;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < (len - 1)) {
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    // /** Returns the integer value of this string, 
    //  *  until a non-digit character is detected. */
    // method int intValue() {
    // }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        do recur(val);
        let len = len + 1;
        return;
    }

    method void recur(int val) {
        if (val < 10) {
            do appendChar(val + 48);
            return;
        }

        do recur(val / 10);
        do appendChar((val - ((val / 10) * 10)) + 48);
        return;
    }

    // /** Returns the new line character. */
    // function char newLine() {
    // }

    // /** Returns the backspace character. */
    // function char backSpace() {
    // }

    // /** Returns the double quote (") character. */
    // function char doubleQuote() {
    // }
}
